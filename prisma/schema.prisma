// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

generator nexusPrisma {
  provider = "nexus-prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id        Int      @id @default(autoincrement())
  discordId String   @unique
  username  String   @unique
  createdAt DateTime @default(now())
  flags     Int      @default(0)

  bio String? @db.VarChar(500)

  activeTitle   TitleInventory? @relation(fields: [activeTitleId], references: [id])
  activeTitleId Int?            @unique

  createdTitles TitleInventory[] @relation("InventoryCreatedByAccount")
  titles        TitleInventory[] @relation("InventoryAccount")

  currency        Int @default(0)
  premiumCurrency Int @default(0)
  paidCurrency    Int @default(0)

  cards                Card[]
  rolls                RollLog[]
  gts                  GTS[]
  minigames            Minigame[]
  words                Words[]
  payments             Payment[]
  tags                 Tag[]
  minigameStats        MinigameStats[]
  collections          PrefabCollection[]
  Bias                 Bias[]
  suggestionsMade      CardSuggestion[]     @relation(name: "suggestionSuggestedBy")
  suggestionsFulfilled CardSuggestion[]     @relation(name: "suggestionFulfilledBy")
  suggestionVotes      CardSuggestionVote[]
}

/// Broad collections of cards typically encompassing many subgroups
model Group {
  id       Int          @id @default(autoincrement())
  name     String
  creation DateTime?    @db.Date
  gender   GroupGender?
  aliases  Alias[]

  songs Song[]

  cards  CardPrefab[]
  bias   Bias[]
  trivia Trivia[]
}

enum GroupGender {
  MALE
  FEMALE
  COED
}

model Alias {
  id      Int    @id @default(autoincrement())
  group   Group  @relation(fields: [groupId], references: [id])
  groupId Int
  alias   String

  @@unique([groupId, alias])
}

/// A collection typically containing several similarly-themed cards
model Subgroup {
  id       Int       @id @default(autoincrement())
  name     String
  creation DateTime? @db.Date

  prefabs CardPrefab[]
}

/// An individual character.
model Character {
  id       Int       @id @default(autoincrement())
  name     String
  birthday DateTime? @db.Date
  gender   Gender?

  prefabs CardPrefab[]
  songs   Song[]
}

/// Character gender.
enum Gender {
  MALE
  FEMALE
  NONBINARY
}

model Title {
  id Int @id @default(autoincrement())

  title       String  @unique @db.VarChar(100)
  description String? @db.VarChar(1000)

  accountTitles TitleInventory[]
}

model TitleInventory {
  id Int @id @default(autoincrement())

  title   Title @relation(fields: [titleId], references: [id])
  titleId Int

  account       Account  @relation(fields: [accountId], references: [id], name: "InventoryAccount")
  accountId     Int
  activeAccount Account?

  createdAt   DateTime @default(now())
  createdBy   Account? @relation(fields: [createdById], references: [id], name: "InventoryCreatedByAccount")
  createdById Int?

}

model Song {
  id Int @id @default(autoincrement())

  title     String
  group     Group?     @relation(fields: [groupId], references: [id])
  groupId   Int?
  soloist   Character? @relation(fields: [soloistId], references: [id])
  soloistId Int?
  release   Release    @relation(fields: [releaseId], references: [id])
  releaseId Int
}

model Release {
  id        Int          @id @default(autoincrement())
  droppable Boolean      @default(false)
  cards     CardPrefab[]
  songs     Song[]
}

/// Cards
model CardPrefab {
  id Int @id @default(autoincrement())

  character   Character @relation(fields: [characterId], references: [id])
  characterId Int

  subgroup   Subgroup? @relation(fields: [subgroupId], references: [id])
  subgroupId Int?

  group   Group? @relation(fields: [groupId], references: [id])
  groupId Int?

  lastIssue Int @default(0)
  maxCards  Int @default(0)
  rarity    Int @default(100)

  release   Release @relation(fields: [releaseId], references: [id])
  releaseId Int

  cards       Card[]
  collections PrefabCollection[]
}

model Card {
  id Int @id @default(autoincrement())

  prefab   CardPrefab @relation(fields: [prefabId], references: [id])
  prefabId Int

  owner   Account? @relation(fields: [ownerId], references: [id])
  ownerId Int?

  tint     Int     @default(16755404)
  hasFrame Boolean @default(false)
  issue    Int?
  quality  Quality

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  tag   Tag? @relation(fields: [tagId], references: [id])
  tagId Int?

  rolls RollLog[]
}

model Tag {
  id Int @id @default(autoincrement())

  account   Account @relation(fields: [accountId], references: [id])
  accountId Int

  tag   String
  emoji String @db.VarChar(64)
  cards Card[]

  updatedAt DateTime @default(now()) @updatedAt
}

enum Quality {
  SEED
  SPROUT
  BUD
  FLOWER
  BLOOM
}

enum MinigameType {
  GTS
  GUESS_CHARACTER
  WORDS

  GUESS_THE_SONG
  GUESS_THE_IDOL
  GUESS_THE_GROUP
  TRIVIA
}

model Minigame {
  account   Account  @relation(fields: [accountId], references: [id])
  accountId Int      @id @unique
  claimed   Int      @default(0)
  lastClaim DateTime
  pending   Boolean  @default(false)

  premiumClaimed   Int       @default(0)
  lastPremiumClaim DateTime?
}

model MinigameStats {
  account   Account @relation(fields: [accountId], references: [id])
  accountId Int

  type                 MinigameType
  totalGames           Int          @default(0)
  totalAttempts        Int          @default(0)
  totalTime            Int          @default(0)
  totalCurrency        Int          @default(0)
  totalPremiumCurrency Int          @default(0)
  totalCards           Int          @default(0)

  @@id([accountId, type])
  @@unique([accountId, type])
}

model GTS {
  account   Account @relation(fields: [accountId], references: [id])
  accountId Int     @id @unique

  totalGames           Int @default(0)
  totalGuesses         Int @default(0)
  totalTime            Int @default(0)
  totalCurrency        Int @default(0)
  totalPremiumCurrency Int @default(0)
  totalCards           Int @default(0)
}

model Words {
  account   Account @relation(fields: [accountId], references: [id])
  accountId Int     @id @unique

  totalGames           Int @default(0)
  totalWords           Int @default(0)
  totalTime            Int @default(0)
  totalCurrency        Int @default(0)
  totalPremiumCurrency Int @default(0)
  totalCards           Int @default(0)
}

// Action Logging
model RollLog {
  id Int @id @default(autoincrement())

  account   Account @relation(fields: [accountId], references: [id])
  accountId Int

  card   Card @relation(fields: [cardId], references: [id])
  cardId Int

  gender Gender?

  createdAt DateTime @default(now())
}

enum ProductType {
  PAID_CURRENCY
  ALPHA_TITLE
  BETA_TITLE
  SIGMA_TITLE
}

model Product {
  id        Int         @id @default(autoincrement())
  name      String
  type      ProductType
  amount    Int
  price     Int
  available Boolean     @default(false)
  limit     Int?
  purchases Payment[]
}

model Payment {
  id Int @id @default(autoincrement())

  account   Account @relation(fields: [accountId], references: [id])
  accountId Int

  product   Product @relation(fields: [productId], references: [id])
  productId Int

  paymentId String

  cost    Int
  success Boolean @default(false)
  url     String
}

model PrefabCollection {
  account   Account @relation(fields: [accountId], references: [id])
  accountId Int

  prefab   CardPrefab @relation(fields: [prefabId], references: [id])
  prefabId Int

  rolled   Boolean @default(false)
  upgraded Boolean @default(false)

  @@id([accountId, prefabId])
  @@unique([accountId, prefabId])
}

model Announcement {
  id           Int      @id @default(autoincrement())
  announcement String
  createdAt    DateTime @default(now())
}

model Bias {
  account   Account @relation(fields: [accountId], references: [id])
  accountId Int

  group   Group @relation(fields: [groupId], references: [id])
  groupId Int

  @@id([accountId, groupId])
  @@unique([accountId, groupId])
}

model Trivia {
  id Int @id @default(autoincrement())

  group   Group @relation(fields: [groupId], references: [id])
  groupId Int

  question  String
  solutions TriviaAnswer[]
}

model TriviaAnswer {
  id Int @id @default(autoincrement())

  trivia   Trivia @relation(fields: [triviaId], references: [id])
  triviaId Int

  answer  String
  correct Boolean

  @@unique([triviaId, answer])
}

model CardSuggestion {
  id Int @id @default(autoincrement())

  groupName    String
  subgroupName String

  suggestedBy Account @relation(fields: [accountId], references: [id], name: "suggestionSuggestedBy")
  accountId   Int

  fulfilledBy Account? @relation(fields: [managerId], references: [id], name: "suggestionFulfilledBy")
  managerId   Int?

  fulfilled Boolean              @default(false)
  votes     CardSuggestionVote[]

  publicMessageId  String
  privateMessageId String
}

model CardSuggestionVote {
  id Int @id @default(autoincrement())

  account   Account @relation(fields: [accountId], references: [id])
  accountId Int

  suggestion   CardSuggestion @relation(fields: [suggestionId], references: [id])
  suggestionId Int

  @@unique([accountId, suggestionId])
}
