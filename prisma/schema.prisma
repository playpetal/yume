// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator nexusPrisma {
  provider = "nexus-prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id        Int      @id @default(autoincrement())
  discordId String   @unique
  username  String   @unique
  createdAt DateTime @default(now())

  activeTitle   TitleInventory? @relation(fields: [activeTitleId], references: [id])
  activeTitleId Int?            @unique

  createdTitles TitleInventory[] @relation("InventoryCreatedByAccount")
  titles        TitleInventory[] @relation("InventoryAccount")

  userGroups AccountUserGroup[]
}

model UserGroup {
  id   Int    @id @default(autoincrement())
  name String @unique

  members AccountUserGroup[]
}

model AccountUserGroup {
  id Int @id @default(autoincrement())

  account   Account @relation(fields: [accountId], references: [id])
  accountId Int

  group   UserGroup @relation(fields: [groupId], references: [id])
  groupId Int

}

/// Broad collections of cards typically encompassing many subgroups
model Group {
  id       Int       @id @default(autoincrement())
  name     String
  creation DateTime? @db.Date
  aliases  Alias[]
}

model Alias {
  id      Int    @id @default(autoincrement())
  group   Group  @relation(fields: [groupId], references: [id])
  groupId Int
  alias   String

  @@unique([groupId, alias])
}

/// A collection typically containing several similarly-themed cards
model Subgroup {
  id       Int       @id @default(autoincrement())
  name     String
  creation DateTime? @db.Date
}

/// An individual character.
model Character {
  id       Int       @id @default(autoincrement())
  name     String
  birthday DateTime? @db.Date
  gender   Gender?
}

/// Character gender.
enum Gender {
  MALE
  FEMALE
  NONBINARY
}

model Title {
  id Int @id @default(autoincrement())

  title       String  @unique @db.VarChar(100)
  description String? @db.VarChar(1000)

  accountTitles TitleInventory[]
}

model TitleInventory {
  id Int @id @default(autoincrement())

  title   Title @relation(fields: [titleId], references: [id])
  titleId Int

  account       Account  @relation(fields: [accountId], references: [id], name: "InventoryAccount")
  accountId     Int
  activeAccount Account?

  createdAt   DateTime @default(now())
  createdBy   Account? @relation(fields: [createdById], references: [id], name: "InventoryCreatedByAccount")
  createdById Int?

}
