### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Account {
  activeTitleId: Int
  bio: String
  createdAt: DateTime!
  currency: Int!
  discordId: String!
  groups: [AccountUserGroup!]!
  gts: GTS
  id: Int!
  premiumCurrency: Int!
  stats: AccountStats
  title: Title
  username: String!
}

"""Account Stats"""
type AccountStats {
  cardCount: Int!
  rollCount: Int!
}

type AccountUserGroup {
  account: Account
  accountId: Int!
  group: UserGroup
  groupId: Int!
  id: Int!
}

type Alias {
  alias: String!
  group: Group!
  groupId: Int!
  id: Int!
}

type Card {
  createdAt: DateTime!
  hasFrame: Boolean!
  id: Int!
  issue: Int
  owner: Account
  ownerId: Int
  prefab: CardPrefab!
  prefabId: Int!
  quality: Quality!
  tint: Int!
}

"""Cards"""
type CardPrefab {
  character: Character!
  characterId: Int!
  group: Group
  groupId: Int
  id: Int!
  maxCards: Int!
  rarity: Int!
  release: Release!
  releaseId: Int!
  subgroup: Subgroup
  subgroupId: Int
}

"""An individual character."""
type Character {
  birthday: DateTime
  gender: Gender
  id: Int!
  name: String!
}

"""The `DateTime` custom scalar type represents a point in time."""
scalar DateTime

"""A discord user"""
type DiscordUser {
  avatar: String
  discriminator: String!
  flags: Int
  id: String!
  locale: String
  mfa_enabled: Boolean
  username: String!
}

"""GTS Statistics"""
type GTS {
  accountId: Int!
  totalCards: Int!
  totalCurrency: Int!
  totalGames: Int!
  totalGuesses: Int!
  totalPremiumCurrency: Int!
  totalTime: Int!
}

"""Game song"""
type GameSong {
  group: String
  id: Int!
  title: String!
  video: String!
}

"""Character gender"""
enum Gender {
  FEMALE
  MALE
  NONBINARY
}

"""Broad collections of cards typically encompassing many subgroups"""
type Group {
  aliases: [Alias!]!
  creation: DateTime
  gender: GroupGender
  id: Int!
  name: String!
}

"""Group gender"""
enum GroupGender {
  COED
  FEMALE
  MALE
}

type InventoryPage {
  cards: Int!
  current: Int!
  max: Int!
}

type Mutation {
  assignGroup(accountId: Int!, groupId: Int!): AccountUserGroup!
  burnCard(cardId: Int!): Int!
  changeCardColor(cardId: Int!, color: Int!): Card!
  claimMinigameCardReward: [Card!]!
  claimMinigameLilyReward: Account!
  claimMinigamePetalReward: Account!
  completeGts(guesses: Int!, reward: Reward!, time: Int!): Boolean!
  createAccount(username: String!): Account!
  createAlias(alias: String!, groupId: Int!): Alias!
  createCharacter(birthday: DateTime, gender: Gender, name: String!): Character!
  createGroup(creation: DateTime, gender: GroupGender, name: String!): Group!
  createPrefab(characterId: Int!, groupId: Int, maxCards: Int, rarity: Int, releaseId: Int, subgroupId: Int): CardPrefab!
  createRelease: Release!
  createSubgroup(creation: DateTime, name: String!): Subgroup!
  createUserGroup(name: String!): UserGroup!
  deleteAlias(id: Int!): Int!
  deleteCharacter(id: Int!): Int!
  deleteGroup(id: Int!): Int!
  deleteSubgroup(id: Int!): Int!
  gift(cardIds: [Int!], petals: Int, recipientId: Int!): Boolean!
  rollCards(amount: Int!, gender: Gender): [Card!]!
  setBio(bio: String): Account!
  setUserTitle(id: Int!): Account!
  unassignGroup(accountId: Int!, groupId: Int!): Int!
  updateAlias(alias: String, groupId: Int, id: Int!): Alias!
  updateCharacter(birthday: DateTime, gender: Gender, id: Int!, name: String): Character!
  updateGroup(creation: DateTime, gender: GroupGender, id: Int!, name: String): Group!
  updatePrefab(characterId: Int, groupId: Int, maxCards: Int, prefabId: Int!, rarity: Int, releaseId: Int, subgroupId: Int): CardPrefab!
  updateRelease(droppable: Boolean, id: Int!): Release!
  updateSubgroup(creation: DateTime, id: Int!, name: String): Subgroup!
}

enum Quality {
  BLOOM
  BUD
  FLOWER
  SEED
  SPROUT
}

type Query {
  aliases(alias: String, groupId: Int, id: Int): [Alias!]!
  canClaimPremiumRewards: Int!
  canClaimRewards: Int!
  getCard(id: Int!): Card
  getCharacter(id: Int!): Character
  getGroup(id: Int!): Group
  getRandomSong(gender: GroupGender): GameSong
  getSubgroup(id: Int!): Subgroup
  getUserTitle(id: Int!): TitleInventory
  inventory(character: String, group: String, next: Int, prev: Int, subgroup: String, user: Int!): [Card!]!
  inventoryPage(character: String, cursor: Int!, group: String, subgroup: String, user: Int!): InventoryPage!
  isWordValid(word: String!): Boolean!
  lastRelease: Release
  prefab(id: Int!): CardPrefab
  release(id: Int!): Release
  searchCards(ownerId: Int!, search: String!): [Card!]!
  searchCharacters(search: String!): [Character!]!
  searchGroups(search: String!): [Group!]!
  searchPrefabs(search: String!): [CardPrefab!]!
  searchSubgroups(search: String!): [Subgroup!]!
  searchTitles(search: String!): [Title!]!
  title(id: Int!): Title
  user(discordId: String, id: Int, username: String): Account
  userGroups(exact: String, search: String): [UserGroup!]!
  userTitles(accountId: Int!, search: String): [TitleInventory!]!
  word: String!
}

type Release {
  cards: [CardPrefab!]!
  droppable: Boolean!
  id: Int!
}

enum Reward {
  CARD
  LILY
  PETAL
}

type Song {
  group: Group
  groupId: Int
  id: Int!
  title: String!
}

"""A collection typically containing several similarly-themed cards"""
type Subgroup {
  creation: DateTime
  id: Int!
  name: String!
}

type Title {
  description: String
  id: Int!
  inventory: [TitleInventory!]!
  ownedCount: Int!
  title: String!
}

type TitleInventory {
  account: Account!
  accountId: Int!
  id: Int!
  title: Title!
  titleId: Int!
}

type UserGroup {
  id: Int!
  members: [AccountUserGroup!]!
  name: String!
}
