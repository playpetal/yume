### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Account {
  activeTitleId: Int
  bio: String
  createdAt: DateTime!
  discordId: String!
  groups: [AccountUserGroup!]!
  id: Int!
  title: TitleInventory
  username: String!
}

type AccountUserGroup {
  account: Account
  accountId: Int!
  group: UserGroup
  groupId: Int!
  id: Int!
}

type Alias {
  alias: String!
  group: Group!
  groupId: Int!
  id: Int!
}

"""An individual character."""
type Character {
  birthday: DateTime
  gender: Gender
  id: Int!
  name: String!
}

"""The `DateTime` custom scalar type represents a point in time."""
scalar DateTime

"""A discord user"""
type DiscordUser {
  avatar: String
  discriminator: String!
  flags: Int
  id: String!
  locale: String
  mfa_enabled: Boolean
  username: String!
}

"""Character gender"""
enum Gender {
  FEMALE
  MALE
  NONBINARY
}

"""Broad collections of cards typically encompassing many subgroups"""
type Group {
  aliases: [Alias!]!
  creation: DateTime
  gender: GroupGender
  id: Int!
  name: String!
}

"""Group gender"""
enum GroupGender {
  COED
  FEMALE
  MALE
}

type Mutation {
  assignGroup(accountId: Int!, groupId: Int!): AccountUserGroup!
  createAccount(username: String!): Account!
  createAlias(alias: String!, groupId: Int!): Alias!
  createCharacter(birthday: DateTime, gender: Gender, name: String!): Character!
  createGroup(creation: DateTime, gender: GroupGender, name: String!): Group!
  createSubgroup(creation: DateTime, name: String!): Subgroup!
  createUserGroup(name: String!): UserGroup!
  deleteAlias(id: Int!): Int!
  deleteCharacter(id: Int!): Int!
  deleteGroup(id: Int!): Int!
  deleteSubgroup(id: Int!): Int!
  setBio(bio: String): Account!
  unassignGroup(accountId: Int!, groupId: Int!): Int!
  updateAlias(alias: String, groupId: Int, id: Int!): Alias!
  updateCharacter(birthday: DateTime, gender: Gender, id: Int!, name: String): Character!
  updateGroup(creation: DateTime, id: Int!, name: String): Group!
  updateSubgroup(creation: DateTime, id: Int!, name: String): Subgroup!
}

type Query {
  aliases(alias: String, groupId: Int, id: Int): [Alias!]!
  characters(birthday: DateTime, gender: Gender, id: Int, name: String): [Character!]!
  getRandomSong(gender: GroupGender): Song
  groups(after: Int, alias: String, creation: DateTime, id: Int, name: String): [Group!]!
  me: Account
  subgroups(creation: DateTime, id: Int, name: String): [Subgroup!]!
  titles(id: Int, name: String): [Title!]!
  user(discordId: String, id: Int, username: String): Account
  userGroups(exact: String, search: String): [UserGroup!]!
}

type Song {
  group: Group
  groupId: Int!
  id: Int!
  title: String!
}

"""A collection typically containing several similarly-themed cards"""
type Subgroup {
  creation: DateTime
  id: Int!
  name: String!
}

type Title {
  description: String
  id: Int!
  inventory: [TitleInventory!]!
  ownedCount: Int!
  title: String!
}

type TitleInventory {
  account: Account!
  accountId: Int!
  id: Int!
  title: Title!
  titleId: Int!
}

type UserGroup {
  id: Int!
  members: [AccountUserGroup!]!
  name: String!
}
