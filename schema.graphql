### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Account {
  activeTitleId: Int
  bio: String
  createdAt: DateTime!
  currency: Int!
  discordId: String!
  flags: Int!
  id: Int!
  minigameStats(type: MinigameType!): MinigameStats
  premiumCurrency: Int!
  stats: AccountStats
  supporterTime: Float
  tags: [Tag!]!
  title: Title
  username: String!
}

"""Account Stats"""
type AccountStats {
  cardCount: Int!
  rollCount: Int!
}

type Alias {
  alias: String!
  group: Group!
  groupId: Int!
  id: Int!
}

type Card {
  createdAt: DateTime!
  hasFrame: Boolean!
  id: Int!
  issue: Int
  owner: Account
  ownerId: Int
  prefab: CardPrefab!
  prefabId: Int!
  quality: Quality!
  tag: Tag
  tagId: Int
  tint: Int!
}

"""Cards"""
type CardPrefab {
  character: Character!
  characterId: Int!
  group: Group
  groupId: Int
  id: Int!
  maxCards: Int!
  rarity: Int!
  release: Release!
  releaseId: Int!
  subgroup: Subgroup
  subgroupId: Int
}

"""An individual character."""
type Character {
  birthday: DateTime
  gender: Gender
  id: Int!
  name: String!
}

"""The `DateTime` custom scalar type represents a point in time."""
scalar DateTime

"""Account Flags"""
enum Flag {
  DEVELOPER
  PUBLIC_SUPPORTER
  RELEASE_MANAGER
}

"""Game song"""
type GameSong {
  group: String
  id: Int!
  soloist: String
  title: String!
  video: String!
}

"""Character gender"""
enum Gender {
  FEMALE
  MALE
  NONBINARY
}

"""Broad collections of cards typically encompassing many subgroups"""
type Group {
  aliases: [Alias!]!
  creation: DateTime
  gender: GroupGender
  id: Int!
  name: String!
}

"""Group gender"""
enum GroupGender {
  COED
  FEMALE
  MALE
}

"""Inventory ordering type"""
enum InventoryOrder {
  ASC
  DESC
}

type InventoryPage {
  cards: Int!
  max: Int!
}

"""Inventory sorting type"""
enum InventorySort {
  CHARACTER
  CODE
  GROUP
  ISSUE
  STAGE
  SUBGROUP
}

type Leaderboard {
  account: Account!
  accountId: Int!
  value: Float!
}

type MinigameStats {
  account: Account!
  accountId: Int!
  totalAttempts: Int!
  totalCards: Int!
  totalCurrency: Int!
  totalGames: Int!
  totalPremiumCurrency: Int!
  totalTime: Int!
  type: MinigameType!
}

enum MinigameType {
  GTS
  GUESS_CHARACTER
  WORDS
}

type Mutation {
  burnCard(cardId: Int!): Int!
  changeCardColor(cardId: Int!, color: Int!): Card!
  claimMinigameCardReward: [Card!]!
  claimMinigameLilyReward: Account!
  claimMinigamePetalReward: Account!
  completeMinigame(guesses: Int!, reward: Reward!, time: Int!, type: MinigameType!): Boolean!
  completeTransaction(token: String!): Boolean!
  createAccount(username: String!): Account!
  createAlias(alias: String!, groupId: Int!): Alias!
  createCharacter(birthday: DateTime, gender: Gender, name: String!): Character!
  createGroup(creation: DateTime, gender: GroupGender, name: String!): Group!
  createPrefab(characterId: Int!, groupId: Int, maxCards: Int, rarity: Int, releaseId: Int, subgroupId: Int): CardPrefab!
  createRelease: Release!
  createSong(groupId: Int, releaseId: Int, soloistId: Int, title: String!, url: String!): Song!
  createSubgroup(creation: DateTime, name: String!): Subgroup!
  createTag(emoji: String!, name: String!): Tag!
  createTitle(description: String, title: String!): Title!
  deleteAlias(id: Int!): Int!
  deleteCharacter(id: Int!): Int!
  deleteGroup(id: Int!): Int!
  deleteSong(songId: Int!): Int!
  deleteSubgroup(id: Int!): Int!
  deleteTag(tag: String!): Tag!
  editSong(groupId: Int, releaseId: Int, soloistId: Int, songId: Int!, title: String): Song!
  editTag(emoji: String, name: String, tag: String!): Tag!
  gift(cardIds: [Int!], lilies: Int, petals: Int, recipientId: Int!): Boolean!
  grantAllTitle(titleId: Int!): Int!
  grantTitle(accountId: Int!, titleId: Int!): TitleInventory!
  newTransaction(productId: Int!): Payment!
  revokeAllTitle(titleId: Int!): Int!
  revokeTitle(accountId: Int!, titleId: Int!): Int!
  rollCards(amount: Int!, gender: Gender): [Card!]!
  setBio(bio: String): Account!
  setFrame(cardId: Int!): Card!
  setUserTitle(id: Int!): Account!
  tagCard(cardId: Int!, tag: String!): Card!
  toggleFlag(accountId: Int!, flag: Flag!): Account!
  togglePublicSupporter: Account!
  updateAlias(alias: String, groupId: Int, id: Int!): Alias!
  updateCharacter(birthday: DateTime, gender: Gender, id: Int!, name: String): Character!
  updateGroup(creation: DateTime, gender: GroupGender, id: Int!, name: String): Group!
  updatePrefab(characterId: Int, groupId: Int, maxCards: Int, prefabId: Int!, rarity: Int, releaseId: Int, subgroupId: Int): CardPrefab!
  updateRelease(droppable: Boolean, id: Int!): Release!
  updateSubgroup(creation: DateTime, id: Int!, name: String): Subgroup!
}

type Payment {
  accountId: Int!
  cost: Int!
  id: Int!
  paymentId: String!
  productId: Int!
  success: Boolean!
  url: String!
}

type Product {
  available: Boolean!
  id: Int!
  name: String!
  price: Int!
  type: ProductType
}

enum ProductType {
  ALPHA_TITLE
  BETA_TITLE
  PAID_CURRENCY
  SIGMA_TITLE
}

enum Quality {
  BLOOM
  BUD
  FLOWER
  SEED
  SPROUT
}

type Query {
  aliases(alias: String, groupId: Int, id: Int): [Alias!]!
  canClaimPremiumRewards: Int!
  canClaimRewards: Int!
  getCard(id: Int!): Card
  getCharacter(id: Int!): Character
  getGTSRewardLeaderboard(type: Reward!): [Leaderboard!]!
  getGTSTimeLeaderboard: [Leaderboard!]!
  getGroup(id: Int!): Group
  getRandomCharacter(gender: Gender): Character!
  getRandomSong(gender: GroupGender): GameSong
  getSubgroup(id: Int!): Subgroup
  getSupporterLeaderboard: [Leaderboard!]!
  getTag(tag: String!): Tag
  getUserTitle(id: Int!): TitleInventory
  getWordsRewardLeaderboard(type: Reward!): [Leaderboard!]!
  getWordsTimeLeaderboard: [Leaderboard!]!
  inventory(character: String, group: String, order: InventoryOrder, page: Int!, sort: InventorySort, subgroup: String, tag: String, userId: Int!): [Card!]!
  inventoryPage(character: String, group: String, subgroup: String, tag: String, user: Int!): InventoryPage!
  isEmoji(emoji: String!): Boolean!
  isWordValid(word: String!): Boolean!
  lastRelease: Release
  payment(paymentId: String!): Payment
  prefab(id: Int!): CardPrefab
  products: [Product!]!
  reachedPurchaseLimit(productId: Int!): Boolean!
  release(id: Int!): Release
  searchCards(ownerId: Int!, search: String!): [Card!]!
  searchCharacters(birthday: DateTime, birthdayAfter: DateTime, birthdayBefore: DateTime, page: Int, search: String!): [Character!]!
  searchGroups(search: String!): [Group!]!
  searchPrefabs(search: String!): [CardPrefab!]!
  searchSubgroups(search: String!): [Subgroup!]!
  searchTags(search: String!): [Tag!]!
  searchTitles(search: String!): [Title!]!
  title(id: Int, title: String): Title
  user(discordId: String, id: Int, username: String): Account
  userTitles(accountId: Int!, search: String): [TitleInventory!]!
  word: String!
}

type Release {
  cards: [CardPrefab!]!
  droppable: Boolean!
  id: Int!
}

enum Reward {
  CARD
  LILY
  PETAL
}

type Song {
  group: Group
  groupId: Int
  id: Int!
  release: Release!
  releaseId: Int!
  soloist: Character
  soloistId: Int
  title: String!
}

"""A collection typically containing several similarly-themed cards"""
type Subgroup {
  creation: DateTime
  id: Int!
  name: String!
}

type Tag {
  account: Account!
  accountId: Int!
  cardCount: Int!
  emoji: String!
  id: Int!
  tag: String!
  updatedAt: DateTime!
}

type Title {
  description: String
  id: Int!
  inventory: [TitleInventory!]!
  ownedCount: Int!
  title: String!
}

type TitleInventory {
  account: Account!
  accountId: Int!
  id: Int!
  title: Title!
  titleId: Int!
}
